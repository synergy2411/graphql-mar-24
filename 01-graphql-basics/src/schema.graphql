type Subscription {
  comment: CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}
type Mutation {
  createUser(data: CreateUserInput): User!
  deleteUser(authorId: ID!): ID!
  createPost(data: CreatePostInput): Post!
  deletePost(postId: ID!): ID!
  createComment(data: CreateCommentInput): Comment!
  deleteComment(commentId: ID!): ID!
  updateComment(commentId: ID, text: String!): Comment!
}
type Query {
  users(query: String): [User!]!
  posts(query: String): [Post!]!
  comments: [Comment!]!
}
type User {
  id: ID!
  name: String!
  age: Int
  email: String!
  posts: [Post!]!
  comments: [Comment!]!
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}
type Comment {
  id: ID!
  text: String!
  post: Post!
  creator: User!
}

type CommentSubscriptionPayload {
  mutationType: MutationTypeEnum!
  comment: Comment!
}
type PostSubscriptionPayload {
  mutationType: MutationTypeEnum
  post: Post!
}
input CreateUserInput {
  name: String!
  age: Int!
  email: String!
}
input CreatePostInput {
  title: String!
  body: String!
  published: Boolean
  authorId: ID!
}
input CreateCommentInput {
  text: String!
  postId: ID!
  creator: ID!
}

enum MutationTypeEnum {
  CREATED
  DELETED
  UPDATED
}
